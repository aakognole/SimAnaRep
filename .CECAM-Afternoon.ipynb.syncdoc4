{"notebook_name":"CECAM-Afternoon.ipynb"}
"import MDAnalysis as mda\nimport matplotlib.pyplot as plt\n%matplotlib inline\n"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":4,"outputs":[]}
"from MDAnalysis import *\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd\n"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":5,"outputs":[]}
"import MDAnalysis\nu = MDAnalysis.Universe('41w_ff.psf','50_frame.dcd')\nref = MDAnalysis.Universe(PSF,DCD)     # reference closed AdK (1AKE) (with the default ref_frame=0)\n#ref = MDAnalysis.Universe(PSF,CRD)    # reference open AdK (4AKE)\n\nimport MDAnalysis.analysis.rms\n\nR = MDAnalysis.analysis.rms.RMSD(u, ref,\n           select=\"backbone\",             # superimpose on whole backbone of the whole protein\n           groupselections=[\"backbone and (resid 1-29 or resid 60-121 or resid 160-214)\",   # CORE\n                            \"backbone and resid 122-159\",                                   # LID\n                            \"backbone and resid 30-59\"],                                    # NMP\n           filename=\"rmsd_all_CORE_LID_NMP.dat\")\nR.run()\nR.save()\n\nimport matplotlib.pyplot as plt\nrmsd = R.rmsd.T   # transpose makes it easier for plotting\ntime = rmsd[1]\nfig = plt.figure(figsize=(4,4))\nax = fig.add_subplot(111)\nax.plot(time, rmsd[2], 'k-',  label=\"all\")\nax.plot(time, rmsd[3], 'k--', label=\"CORE\")\nax.plot(time, rmsd[4], 'r--', label=\"LID\")\nax.plot(time, rmsd[5], 'b--', label=\"NMP\")\nax.legend(loc=\"best\")\nax.set_xlabel(\"time (ps)\")\nax.set_ylabel(r\"RMSD ($\\AA$)\")\nfig.savefig(\"rmsd_all_CORE_LID_NMP_ref1AKE.pdf\")"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":7,"outputs":[{"output_type":"error","ename":"IOError","evalue":"Failed to load from the topology file 41w_ff.psf with parser <class 'MDAnalysis.topology.PSFParser.PSFParser'>.\nError: [Errno 5] Cannot open file or stream in mode='r'.: \"'41w_ff.psf'\"","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mIOError\u001b[0m                                   Traceback (most recent call last)","\u001b[1;32m<ipython-input-7-ea579482f2ff>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mMDAnalysis\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mu\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mMDAnalysis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mUniverse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'41w_ff.psf'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'50_frame.dcd'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mref\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mMDAnalysis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mUniverse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mPSF\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mDCD\u001b[0m\u001b[1;33m)\u001b[0m     \u001b[1;31m# reference closed AdK (1AKE) (with the default ref_frame=0)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m#ref = MDAnalysis.Universe(PSF,CRD)    # reference open AdK (4AKE)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m/projects/4a420c65-bab9-4479-a810-f7137c0dcd19/.local/lib/python2.7/site-packages/MDAnalysis/core/AtomGroup.pyc\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   3778\u001b[0m             raise IOError(\"Failed to load from the topology file {0}\"\n\u001b[0;32m   3779\u001b[0m                           \u001b[1;34m\" with parser {1}.\\n\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3780\u001b[1;33m                           \"Error: {2}\".format(self.filename, parser, err))\n\u001b[0m\u001b[0;32m   3781\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3782\u001b[0m             raise ValueError(\"Failed to construct topology from file {0}\"\n","\u001b[1;31mIOError\u001b[0m: Failed to load from the topology file 41w_ff.psf with parser <class 'MDAnalysis.topology.PSFParser.PSFParser'>.\nError: [Errno 5] Cannot open file or stream in mode='r'.: \"'41w_ff.psf'\""]}]}
"import MDAnalysis\nu = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd')\npdb = \"./41wl_ff.pdb\"\n#ref1 = u.trajectory.\nref = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd')      # reference closed AdK (1AKE) (with the default ref_frame=0)\n#mobile = Universe(PSF,DCD)\nrmsd(u.atoms.CA.positions, ref.atoms.CA.positions)\n"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":"3.92068124672431e-07"},"metadata":{},"execution_count":8}]}
"RMSD = []\nbackbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\nrefbb = ref.select_atoms(\"protein and (name C or name N or name CA)\")\nfor ts in u.trajectory:\n#    A = backbone.coordinates()\n#    B = refbb.coordinates()\n#    print A()\n#    C = rmsd(A,B)\n#    RMSD.append((u.trajectory.frame, )\n#RMSD = np.array(RMSD)\n\n#print RMSD"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":"array([[ -1.65002239,  11.57836819, -12.90262413],\n       [ -1.54120564,  10.56737137, -11.82316113],\n       [ -1.78991807,   9.14485931, -12.47101307],\n       ..., \n       [ 12.47948742,  14.18983364,   1.45734704],\n       [ 12.45819569,  15.40993786,   2.23785901],\n       [ 12.96765614,  15.24008942,   3.69028354]], dtype=float32)"},"metadata":{},"execution_count":9}]}
"len(u.trajectory)"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"50"},"metadata":{}}]}
"Rgyr = []\nprotein = u.select_atoms(\"protein\")\nfor ts in u.trajectory:\n   Rgyr.append((u.trajectory.frame, protein.radius_of_gyration()))\nRgyr = np.array(Rgyr)\n\nprint Rgyr\nimport matplotlib.pyplot as plt\nax = plt.subplot(111)\nax.plot(Rgyr[:,0], Rgyr[:,1], 'r--', lw=2, label=r\"$R_G$\")\nax.set_xlabel(\"Frame\")\nax.set_ylabel(r\"radius of gyration $R_G$ ($\\AA$)\")\nax.figure.savefig(\"Rgyr.pdf\")\nplt.draw()"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":"[[  0.          14.45947817]\n [  1.          14.56343943]\n [  2.          14.66004709]\n [  3.          14.5950319 ]\n [  4.          14.65924899]\n [  5.          14.52109577]\n [  6.          14.52496548]\n [  7.          14.74254526]\n [  8.          14.74876355]\n [  9.          14.52289098]\n [ 10.          14.52560928]\n [ 11.          14.4352187 ]\n [ 12.          14.53671809]\n [ 13.          14.43235824]\n [ 14.          14.46688002]\n [ 15.          14.4705191 ]\n [ 16.          14.41274683]\n [ 17.          14.43789711]\n [ 18.          14.38424011]\n [ 19.          14.41613229]\n [ 20.          14.56441881]\n [ 21.          14.5337207 ]\n [ 22.          14.41597997]\n [ 23.          14.40583184]\n [ 24.          14.45525257]\n [ 25.          14.46460474]\n [ 26.          14.46638457]\n [ 27.          14.40691409]\n [ 28.          14.52930841]\n [ 29.          14.54878399]\n [ 30.          14.48549566]\n [ 31.          14.49806385]\n [ 32.          14.50785088]\n [ 33.          14.50795497]\n [ 34.          14.54129607]\n [ 35.          14.38962131]\n [ 36.          14.51879453]\n [ 37.          14.51302802]\n [ 38.          14.59042283]\n [ 39.          14.50376336]\n [ 40.          14.45130122]\n [ 41.          14.5705463 ]\n [ 42.          14.66729859]\n [ 43.          14.51986238]\n [ 44.          14.54526494]\n [ 45.          14.4653264 ]\n [ 46.          14.46804386]\n [ 47.          14.5561452 ]\n [ 48.          14.39166516]\n [ 49.          14.48221981]]\n"},{"output_type":"display_data","data":{"image/png":"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\nSeoAAAAASUVORK5CYII=\n","text/plain":"<matplotlib.figure.Figure at 0x7f74d11097d0>"},"metadata":{}}]}
""︡{"metadata":{"collapsed":true,"trusted":true},"cell_type":"code","execution_count":null,"outputs":[]}
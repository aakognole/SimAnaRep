"import MDAnalysis\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd\n\ndef proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom\n    \n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='This function will plot Radius of gyration for a given universe (trajectory).')\n    parser.add_argument('-j', '--jobname', help='Enter your job name and it will appear as first coloumn in the result file', default='Test')\n    parser.add_argument('-trj', '--trajectory', help='Filename of Trajecotry file.', required=True)\n    parser.add_argument('-top', '--topology', help='Filename of psf/topology file', required=True)\n    args = parser.parse_args()\n    \n    u = MDAnalysis.Universe(args.topology, args.trajectory)\n    ref = MDAnalysis.Universe(args.topology, args.trajectory)\n    caRMSD =[]\n    allRMSD = []\n    fig,caRMSD,allRMSD = proRMSD(u,ref)\n    #print caRMSD\n    np.savetxt(args.jobname+\"-caRMSD-pro.data\", caRMSD)\n    np.savetxt(args.jobname+\"-allRMSD-pro.data\", allRMSD)\n    fig.figure.savefig(args.jobname+\"-proRMSD.pdf\")"
{"patch":[[[[0,"bname+\"-"],[-1,"all"],[1,"c"],[0,"RMSD-pro"]],2429,2429,19,17]],"time":1444910343048}
{"patch":[[[[0,"name+\"-c"],[1,"a"],[0,"RMSD-pro"]],2430,2430,16,17]],"time":1444910341061}
{"patch":[[[[0,"txt("],[-1,"args.jobname+\"-caRMSD-pro.data"],[1,"\""],[0,"\", a"]],2418,2418,38,9]],"time":1444910336164}
{"patch":[[[[0,"avetxt(\""],[1,"SimAnaRep-allRMSD.data"],[0,"\", allRM"]],2415,2415,16,38]],"time":1444910334166}
{"patch":[[[[0,"-caRMSD-"],[-1,"pro"],[0,".data\", "]],2380,2380,19,16]],"time":1444910321540}
{"patch":[[[[0,"\"-ca"],[-1,"RMSD-"],[0,".dat"]],2379,2379,13,8]],"time":1444910319541}
{"patch":[[[[0,"bname+\"-"],[-1,"ca"],[0,".data\", "]],2373,2373,18,16]],"time":1444910317543}
{"patch":[[[[0,"bname+\"-"],[1,"RoG"],[0,".data\", "]],2373,2373,16,19]],"time":1444910315525}
{"patch":[[[[0,"\", caRMS"],[-1,"D"],[0,")\n    np"]],2389,2389,17,16]],"time":1444910313527}
{"patch":[[[[0,"data\", c"],[-1,"aRMS"],[0,")\n    np"]],2385,2385,20,16]],"time":1444910311385}
{"patch":[[[[0,".data\", "],[-1,"c"],[1,"Rgyrdata"],[0,")\n    np"]],2384,2384,17,24]],"time":1444910309384}
{"patch":[[[[0,"txt("],[-1,"args.jobname+\"-RoG.data\", Rgyrdata"],[1,"\"SimAnaRep-caRMSD.data\", caRMSD"],[0,")\n  "]],2362,2362,42,39]],"time":1444910305525}
{"patch":[[[[0,"name+\"-p"],[-1,"roRMSD"],[0,".pdf\")"]],2480,2480,20,14]],"time":1444910294516}
{"patch":[[[[0,"bname+\"-"],[-1,"p"],[1,"RoG"],[0,".pdf\")"]],2479,2479,15,17]],"time":1444910292516}
{"patch":[[[[0,"fig("],[-1,"args.jobname+\"-RoG"],[1,"\"SimAnaRep-RMSD"],[0,".pdf"]],2468,2468,26,23]],"time":1444910289330}
{"patch":[[[[0,"ry)\n    "],[-1,"ref"],[1,"u"],[0," = MDAna"]],2195,2195,19,17]],"time":1444910281121}
{"patch":[[[[0,"ectory)\n    "],[-1,"u"],[1,"ref"],[0," = MDAnalysi"]],2191,2191,25,27],[[[0,"fig("],[-1,"\"SimAnaRep-RMSD.pdf\""],[1,"args.jobname"],[0,")"]],2468,2468,25,17]],"time":1444910279120}
{"patch":[[[[0,"fig("],[-1,"args.jobname"],[1,"\"SimAnaRep-RMSD.pdf\""],[0,")"]],2468,2468,17,25]],"time":1444910277120}
{"patch":[[[[0,"y)\n    r"],[-1,"ef"],[0," = MDAna"]],2196,2196,18,16]],"time":1444910262025}
{"patch":[[[[0,"ry)\n    "],[-1,"r"],[1,"u"],[0," = MDAna"]],2195,2195,17,17]],"time":1444910260024}
{"patch":[[[[0,"ectory)\n    "],[-1,"u"],[1,"ref"],[0," = MDAnalysi"]],2191,2191,25,27],[[[0,"rse("],[-1,"args.topology, args.trajectory)"],[1,"'41wl_ff.psf','50_frame.dcd') "],[0,"\n   "]],2225,2225,39,38]],"time":1444910257370}
{"patch":[[[[0,"rse("],[-1,"args.topology, args.trajectory"],[1,"'41wl_ff.psf','50_frame.dcd'"],[0,")\n  "]],2163,2163,38,36]],"time":1444910253909}
{"patch":[[[[0,"()\n    \n"],[-1,"    "],[0,"u = MDAn"]],2131,2131,20,16],[[[0,"e.dcd')\n"],[-1,"    "],[0,"ref = MD"]],2185,2185,20,16],[[[0,".dcd') \n"],[-1,"    "],[0,"caRMSD ="]],2242,2242,20,16],[[[0,"MSD =[]\n"],[-1,"    "],[0,"allRMSD "]],2253,2253,20,16],[[[0,"SD = []\n"],[-1,"    "],[0,"fig,caRM"]],2266,2266,20,16],[[[0,"(u,ref)\n"],[-1,"    "],[0,"#print c"]],2302,2302,20,16],[[[0," caRMSD\n"],[-1,"    "],[0,"np.savet"]],2316,2316,20,16],[[[0,"caRMSD)\n"],[-1,"    "],[0,"np.savet"]],2360,2360,20,16],[[[0,"llRMSD)\n"],[-1,"    "],[0,"fig.figu"]],2406,2406,20,16]],"time":1444910234709}
{"patch":[[[[0,"()\n    \n"],[1,"    "],[0,"u = MDAn"]],2131,2131,16,20],[[[0,"rse("],[-1,"'41wl_ff.psf','50_frame.dcd')\nref = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd') \ncaRMSD =[]\nallRMSD = []\nfig,caRMSD,allRMSD = proRMSD(u,ref)\n#print caRMSD\nnp.savetxt(\"SimAnaRep-caRMSD.data\", caRMSD)\nnp.savetxt(\"SimAnaRep-allRMSD.data\", allRMSD)\n"],[1,"args.topology, args.trajectory)\n    fig, Rgyrdata = Rgyr(u)\n    np.savetxt(args.jobname+\"-RoG.data\", Rgyrdata)\n    #print Rgyrdata\n    "],[0,"fig."]],2163,2163,259,143],[[[0,"fig("],[-1,"\"SimAnaRep-RMSD"],[1,"args.jobname+\"-RoG"],[0,".pdf"]],2317,2317,23,26]],"time":1444910232140}
{"patch":[[[[0,"  \n\n"],[-1,"if __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='This function will plot Radius of gyration for a given universe (trajectory).')\n    parser.add_argument('-j', '--jobname', help='Enter your job name and it will appear as first coloumn in the result file', default='Test')\n    parser.add_argument('-trj', '--trajectory', help='Filename of Trajecotry file.', required=True)\n    parser.add_argument('-top', '--topology', help='Filename of psf/topology file', required=True)\n    args = parser.parse_args()\n    \n    u = MDAnalysis.Universe(args.topology, args.trajectory)\n    fig, Rgyrdata = Rgyr(u)\n    np.savetxt(args.jobname+\"-RoG.data\", Rgyrdata)\n    #print Rgyrdata\n    fig.figure.savefig(args.jobname+\"-RoG.pdf\")"],[1,"   "]],1581,1581,764,7]],"time":1444910206702}
{"patch":[[[[0,"om\n    \n\n   "],[1," "]],1576,1576,12,13]],"time":1444910204701}
{"patch":[[[[0,"sd\n\n"],[-1,"def proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom\n    \n\n    "]],147,147,1442,4]],"time":1444910194078}
{"patch":[[[[0,"rt rmsd\n"],[-1,"\n"]],142,142,9,8]],"time":1444910192074}
{"patch":[[[[0,"ort rmsd"],[-1,"\n"]],141,141,9,8]],"time":1444910173951}
{"patch":[[[[-1,"import MDAnalysis\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd"]],0,0,149,0]],"time":1444910171988}
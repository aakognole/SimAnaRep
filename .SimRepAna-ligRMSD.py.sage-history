"import MDAnalysis\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd\n\ndef ligRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for ligand. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD_lig = []\n    ligand = u.select_atoms(\"(resid 142:146) and not name H*\") ## include selection based on user description\n    #current = u.select_atoms(\"segname BGLC and not name H*\")\n    reference = ref.select_atoms(\"(resid 142:146) and not name H*\")\n    for ts in u.trajectory:\n        A = ligand.coordinates()\n        B = reference.coordinates()\n        C = rmsd(A,B)\n        RMSD_lig.append((u.trajectory.frame, C))\n    RMSD_lig = np.array(RMSD_lig)\n    #print RMSD_lig\n    import matplotlib.pyplot as plt\n    ax = plt.subplot(111)\n    ax.plot(RMSD_lig[:,0], RMSD_lig[:,1], 'r--', lw=2, label=r\"$R_G$\")\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of ligand ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD_ligand.pdf\")\n    #plt.draw()\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    return ax,  RMSD_lig\n    \n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='This function will plot RMSD for a given universe (trajectory).')\n    parser.add_argument('-j', '--jobname', help='Enter your job name and it will appear as first coloumn in the result file', default='Test')\n    parser.add_argument('-trj', '--trajectory', help='Filename of Trajecotry file.', required=True)\n    parser.add_argument('-top', '--topology', help='Filename of psf/topology file', required=True)\n    args = parser.parse_args()\n    \n    u = MDAnalysis.Universe(args.topology, args.trajectory)\n    ref = MDAnalysis.Universe(args.topology, args.trajectory)\n    ligandRMSD = []\n    fig,ligandRMSD = ligRMSD(u,ref)\n    #print caRMSD\n    np.savetxt(args.jobname+\"_ligRMSD.data\", ligandRMSD)\n    fig.figure.savefig(args.jobname+\"_ligRMSD.pdf\")"
{"patch":[[[[0,"sd\n\ndef "],[-1,"lig"],[1,"pro"],[0,"RMSD(u,r"]],147,147,19,19],[[[0,"ots for "],[-1,"ligand"],[1,"Protein"],[0,". \n    :"]],222,222,22,23],[[[0,"    RMSD"],[-1,"_lig"],[1," = []\n    RMSDAllAtom"],[0," = []\n  "]],403,403,20,37],[[[0," []\n    "],[-1,"ligand"],[1,"backbone"],[0," = u.sel"]],434,434,22,24],[[[0,"ms(\""],[-1,"(resid 142:146) and not name H*\") ## include selection based on user description"],[1,"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")"],[0,"\n    "],[-1,"#"],[1,"All"],[0,"curr"]],465,465,94,137],[[[0,"ms(\""],[-1,"segname BGLC"],[1,"protein"],[0," and"]],620,620,20,15],[[[0,"me H*\")\n    "],[1,"All"],[0,"reference = "]],642,642,24,27],[[[0,"ms(\""],[-1,"(resid 142:146)"],[1,"protein"],[0," and"]],683,683,23,15],[[[0,"    A = "],[-1,"ligand"],[1,"backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent"],[0,".coordin"]],745,745,22,97],[[[0,"nates()\n        "],[-1,"B"],[1,"F"],[0," = "],[1,"All"],[0,"reference.coordi"]],841,841,36,39],[[[0,"        "],[-1,"RMSD_lig"],[1,"G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom"],[0,".append("]],910,910,24,94],[[[0,"me, "],[-1,"C"],[1,"G"],[0,"))\n"],[1,"\n"],[0,"    RMSD"],[-1,"_lig"],[1," = np.array(RMSD)\n    RMSDAllAtom"],[0," = n"]],1021,1021,24,54],[[[0,"ray(RMSD"],[-1,"_lig"],[1,"AllAtom"],[0,")\n    #p"]],1079,1079,20,23],[[[0,"RMSD"],[-1,"_lig\n    import matplotlib.pyplot as plt"],[1,"AllAtom\n\n    #print RMSD"],[0,"\n   "]],1107,1107,48,32],[[[0,"lot(RMSD"],[-1,"_lig"],[1,"[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom"],[0,"[:,0], R"]],1170,1170,20,89],[[[0,"RMSD"],[-1,"_lig"],[1,"AllAtom"],[0,"[:,1], '"],[-1,"r--"],[1,"g"],[0,"', l"]],1258,1258,23,24],[[[0,"bel="],[-1,"r\"$R_G$"],[1,"\"All Atom RMSD (noH)"],[0,"\")\n"],[1,"\n"],[0,"    "]],1289,1289,18,32],[[[0,"RMSD of "],[-1,"ligand"],[1,"Backbone"],[0," ($\\AA$)"]],1364,1364,22,24],[[[0,"RMSD"],[-1,"_ligand.pdf\")\n    #plt.draw("],[1,".pdf\""],[0,")\n  "]],1415,1415,36,13],[[[0,"    "],[-1,"return ax,  RMSD_lig"],[1,"#plt.draw()\n    return ax, RMSD, RMSDAllAtom"],[0,"\n   "]],1530,1530,28,52]],"time":1444912014202}
{"patch":[[[[0,"sd\n\n"],[-1,"def proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom"],[1,"args.jobname+\"-ligRMSD.data\""],[0,"\n   "]],147,147,1435,36]],"time":1444911797572}
{"patch":[[[[0,"sd\n\n"],[-1,"args.jobname+\"-ligRMSD.data\""],[1,"def proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom"],[0,"\n   "]],147,147,36,1435]],"time":1444911793477}
{"patch":[[[[0,"+\"_ligRMSD.p"],[-1,"df"],[0,"\")"]],2413,2413,16,14]],"time":1444911670636}
{"patch":[[[[0,"ligRMSD."],[-1,"p"],[1,"data"],[0,"\")"]],2416,2416,11,14]],"time":1444911668656}
{"patch":[[[[0,"t(args.jobname+\""],[-1,"_"],[0,"ligRMSD.data\", l"]],2334,2334,33,32]],"time":1444911665612}
{"patch":[[[[0,"obname+\""],[1,"-"],[0,"ligRMSD."]],2342,2342,16,17]],"time":1444911663472}
{"patch":[[[[0,"obname+\""],[-1,"_"],[0,"ligRMSD."]],2407,2407,17,16]],"time":1444911661409}
{"patch":[[[[0,"obname+\""],[1,"-"],[0,"ligRMSD."]],2407,2407,16,17]],"time":1444911659401}
{"patch":[[[[0,"fig("],[-1,"args.jobname+\"-lig"],[1,"\"SimAnaRep-"],[0,"RMSD."],[-1,"data"],[1,"pdf"],[0,"\")"]],2397,2397,33,25]],"time":1444911654657}
{"patch":[[[[0,"obname+\""],[-1,"-"],[0,"ligRMSD."]],2342,2342,17,16]],"time":1444911643445}
{"patch":[[[[0,"obname+\""],[1,"a"],[0,"l"],[-1,"ig"],[0,"RMSD.dat"]],2342,2342,19,18]],"time":1444911639403}
{"patch":[[[[0,"name+\"al"],[1,"l"],[0,"RMSD.dat"]],2344,2344,16,17]],"time":1444911637401}
{"patch":[[[[0,"name"],[-1,"+\""],[0,"allR"]],2344,2344,10,8]],"time":1444911628333}
{"patch":[[[[0,"t(args.j"],[-1,"obname"],[0,"allRMSD."]],2334,2334,22,16]],"time":1444911625937}
{"patch":[[[[0,"xt(args."],[-1,"j"],[0,"allRMSD."]],2333,2333,17,16]],"time":1444911623933}
{"patch":[[[[0,"vetxt(ar"],[-1,"gs."],[1,"f   "],[0,"allRMSD."]],2330,2330,19,20]],"time":1444911621961}
{"patch":[[[[0,"txt("],[-1,"arf   "],[0,"allR"]],2332,2332,14,8]],"time":1444911619861}
{"patch":[[[[0,"savetxt("],[1,"\"SimAnaRep\""],[0,"allRMSD."]],2328,2328,16,27]],"time":1444911617868}
{"patch":[[[[0,"imAnaRep"],[1,"-"],[0,"\"allRMSD"]],2338,2338,16,17]],"time":1444911615905}
{"patch":[[[[0,"SD = []\n"],[-1,"    "],[0,"fig,liga"]],2259,2259,20,16],[[[0,"(u,ref)\n"],[-1,"    "],[0,"#print c"]],2291,2291,20,16],[[[0," caRMSD\n"],[-1,"    "],[0,"np.savet"]],2305,2305,20,16],[[[0,"mAnaRep-"],[-1,"\""],[0,"allRMSD."]],2327,2327,17,16],[[[0,"ndRMSD)\n"],[-1,"    "],[0,"fig.figu"]],2354,2354,20,16]],"time":1444911612525}
{"patch":[[[[0,"    "],[-1,"ligandRMSD = []\nfig,ligandRMSD = ligRMSD(u,ref)\n#print caRMSD\nnp.savetxt(\"SimAnaRep-allRMSD.data\", ligandRMSD)\nfig.figure.savefig(\"SimAnaRep-RMSD.pdf\")"]],2247,2247,155,4]],"time":1444911596685}
{"patch":[[[[0,"ology, args.trajectory)\n    "],[1,"u = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd')\nref = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd') \nligandRMSD = []\nfig,ligandRMSD = ligRMSD(u,ref)\n#print caRMSD\nnp.savetxt(\"SimAnaRep-allRMSD.data\", ligandRMSD)\nfig.figure.savefig(\"SimAnaRep-RMSD.pdf\")"]],2223,2223,28,290]],"time":1444911580568}
{"patch":[[[[0,"    "],[-1,"u = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd')\nref = MDAnalysis.Universe('41wl_ff.psf','50_frame.dcd') \nligandRMSD = []\nfig,ligandRMSD = ligRMSD(u,ref)\n#print caRMSD\nnp.savetxt(\"SimAnaRep-allRMSD.data\", ligandRMSD)\nfig.figure.savefig(\"SimAnaRep-RMSD.pdf\")"]],2247,2247,266,4]],"time":1444911578525}
{"patch":[[[[0,"pology, args.trajectory)"],[-1,"\n    "]],2222,2222,29,24]],"time":1444911576520}
{"patch":[[[[0,"l plot R"],[-1,"MSD"],[0," for a g"]],1699,1699,19,16]],"time":1444911555327}
{"patch":[[[[0,"l plot R"],[1,"adius of gyration"],[0," for a g"]],1699,1699,16,33]],"time":1444911553336}
{"patch":[[[[0,"m\n    \n\n"],[1,"   "],[0,"if __nam"]],1577,1577,16,19]],"time":1444911539084}
{"patch":[[[[0,"   \n\n   "],[1," "],[0,"if __nam"]],1580,1580,16,17]],"time":1444911537257}
{"patch":[[[[0,"    "],[-1,"if __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='This function will plot Radius of gyration for a given universe (trajectory).')\n    parser.add_argument('-j', '--jobname', help='Enter your job name and it will appear as first coloumn in the result file', default='Test')\n    parser.add_argument('-trj', '--trajectory', help='Filename of Trajecotry file.', required=True)\n    parser.add_argument('-top', '--topology', help='Filename of psf/topology file', required=True)\n    args = parser.parse_args()\n    \n    u = MDAnalysis.Universe(args.topology, args.trajectory)\n    ref = MDAnalysis.Universe(args.topology, args.trajectory)"]],1585,1585,679,4]],"time":1444911533179}
{"patch":[[[[0,"sd\n\n"],[-1,"def proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom\n    \n\n    "]],147,147,1442,4]],"time":1444911522180}
{"patch":[[[[0,"rt rmsd\n"],[-1,"\n"]],142,142,9,8]],"time":1444911520176}
{"patch":[[[[0,"ort rmsd"],[-1,"\n"]],141,141,9,8]],"time":1444911511408}
{"patch":[[[[-1,"import MDAnalysis\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd"]],0,0,149,0]],"time":1444911509413}
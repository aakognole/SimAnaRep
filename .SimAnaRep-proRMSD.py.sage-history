"import MDAnalysis\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom MDAnalysis.analysis.align import *\nfrom MDAnalysis.analysis.rms import rmsd\n\ndef proRMSD(u,ref):\n    \"\"\"\n    This function produces RMSD data and plots for Protein. \n    :input \n        1) Universe of Trajectory\n        2) reference universe\n    :return\n        1) matplot object\n        2) array for RMSD data.\n        \n    \"\"\"\n    RMSD = []\n    RMSDAllAtom = []\n    backbone = u.select_atoms(\"protein and (name C or name N or name CA)\")\n    reference = ref.select_atoms(\"protein and (name C or name N or name CA)\")\n    Allcurrent = u.select_atoms(\"protein and not name H*\")\n    Allreference = ref.select_atoms(\"protein and not name H*\")\n    for ts in u.trajectory:\n        A = backbone.coordinates()\n        B = reference.coordinates()\n        E = Allcurrent.coordinates()\n        F = Allreference.coordinates()\n        C = rmsd(A,B)\n        G = rmsd(E,F)\n        RMSD.append((u.trajectory.frame, C))\n        RMSDAllAtom.append((u.trajectory.frame, G))\n\n    RMSD = np.array(RMSD)\n    RMSDAllAtom = np.array(RMSDAllAtom)\n    #print RMSDAllAtom\n\n    #print RMSD\n    ax = plt.subplot(111)\n    ax.plot(RMSD[:,0], RMSD[:,1], 'r', lw=2, label=\"Calpha RMSD\")\n    ax.plot(RMSDAllAtom[:,0], RMSDAllAtom[:,1], 'g', lw=2, label=\"All Atom RMSD (noH)\")\n\n    ax.set_xlabel(\"Frame\")\n    ax.set_ylabel(r\"RMSD of Backbone ($\\AA$)\")\n    #ax.figure.savefig(\"RMSD.pdf\")\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc = 'lower left')\n    #plt.draw()\n    return ax, RMSD, RMSDAllAtom\n    \n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='This function will plot Radius of gyration for a given universe (trajectory).')\n    parser.add_argument('-j', '--jobname', help='Enter your job name and it will appear as first coloumn in the result file', default='Test')\n    parser.add_argument('-trj', '--trajectory', help='Filename of Trajecotry file.', required=True)\n    parser.add_argument('-top', '--topology', help='Filename of psf/topology file', required=True)\n    args = parser.parse_args()\n    \n    u = MDAnalysis.Universe(args.topology, args.trajectory)\n    ref = MDAnalysis.Universe(args.topology, args.trajectory)\n    caRMSD =[]\n    allRMSD = []\n    fig,caRMSD,allRMSD = proRMSD(u,ref)\n    #print caRMSD\n    np.savetxt(args.jobname+\"-caRMSD-pro.data\", caRMSD)\n    np.savetxt(args.jobname+\"-allRMSD-pro.data\", allRMSD)\n    fig.figure.savefig(args.jobname+\"-proRMSD.pdf\")"